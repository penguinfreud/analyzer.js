var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
var nonASCIIidentifierStart =
[170,1,10,1,4,1,5,23,1,31,1,458,4,12,14,5,7,1,1,1,129,5,1,2,2,4,8,1,1,3,1,1,1,
20,1,83,1,139,8,158,9,38,2,1,7,39,72,27,5,3,45,43,35,2,1,99,1,1,15,2,7,2,10,3,
2,1,16,1,1,30,29,89,11,1,24,33,9,2,4,1,5,22,4,1,9,1,3,1,23,25,71,1,1,11,87,54,
3,1,18,1,7,10,15,7,1,7,5,8,2,2,2,22,1,7,1,1,3,4,3,1,16,1,13,2,1,3,14,2,19,6,4,
2,2,22,1,7,1,2,1,2,1,2,31,4,1,1,19,3,16,9,1,3,1,22,1,7,1,2,1,5,3,1,18,1,15,2,
35,8,2,2,2,22,1,7,1,2,1,5,3,1,30,2,1,3,15,1,17,1,1,6,3,3,1,4,3,2,1,1,1,2,3,2,
3,3,3,12,22,1,52,8,1,3,1,23,1,10,1,5,3,1,26,2,6,2,35,8,1,3,1,23,1,10,1,5,3,1,32,
1,1,2,15,2,18,8,1,3,1,41,2,1,16,1,17,2,24,6,5,18,3,24,1,9,1,1,2,7,58,48,1,2,12,
7,58,2,1,1,2,2,1,1,2,1,6,4,1,7,1,3,1,1,1,1,2,2,1,4,1,2,9,1,2,5,1,1,21,4,32,1,
63,8,1,36,27,5,115,43,20,1,16,6,4,4,3,1,3,2,7,3,4,13,12,1,17,38,1,1,5,1,2,43,
1,333,1,4,2,7,1,1,1,4,2,41,1,4,2,33,1,4,2,7,1,1,1,4,2,15,1,57,1,4,2,67,37,16,
16,85,12,620,2,17,1,26,5,75,3,3,15,13,1,4,14,18,14,18,14,13,1,3,15,52,35,1,4,1,
67,88,8,41,1,1,5,70,10,29,51,30,2,5,11,44,21,7,56,23,9,53,82,1,93,47,17,7,55,30,
13,2,10,44,26,36,41,3,10,36,107,4,1,4,3,2,9,192,64,278,2,6,2,38,2,6,2,8,1,1,1,1,
1,1,1,31,2,53,1,7,1,1,3,3,1,7,3,4,2,6,4,13,5,3,1,7,116,1,13,1,16,13,101,1,4,1,2,
10,1,1,3,5,6,1,1,1,1,1,1,4,1,11,2,4,5,5,4,1,17,41,2679,47,1,47,1,133,6,4,3,2,12,
38,1,1,5,1,2,56,7,1,16,23,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,80,1,469,3,25,9,7,5,2,
5,4,86,6,3,1,90,1,4,5,41,3,94,17,27,53,16,512,6582,74,20941,51,1165,67,46,2,269,
3,16,10,2,20,47,16,25,8,80,39,9,2,103,2,4,1,4,12,11,77,10,1,3,1,4,1,23,29,52,14,
50,62,6,3,1,14,28,10,23,25,29,7,47,28,1,48,41,23,3,1,8,20,23,3,1,5,48,1,1,3,2,2,
5,2,1,1,1,24,3,2,11,7,3,12,6,2,6,2,6,9,7,1,7,145,35,29,11172,12,23,4,49,8452,
366,2,106,38,7,12,5,5,1,1,10,1,13,1,5,1,1,1,2,1,2,1,108,33,363,18,64,2,54,40,12,
116,5,1,135,36,26,6,26,11,89,3,6,2,6,2,6,2,3];
var nonASCIIidentifier =
[170,1,10,1,4,1,5,23,1,31,1,458,4,12,14,5,7,1,1,1,17,117,1,2,2,4,8,1,1,3,1,1,1,
20,1,83,1,139,1,5,2,158,9,38,2,1,7,39,9,45,1,1,1,2,1,2,1,1,8,27,5,3,29,11,5,43,
35,2,1,99,1,1,15,4,5,2,10,3,2,1,16,1,1,57,2,89,11,1,24,33,9,2,4,1,5,22,4,20,18,
25,71,1,1,11,55,27,1,100,2,10,1,7,1,7,1,3,1,8,2,2,2,22,1,7,1,1,3,4,2,9,2,2,5,1,
8,1,4,2,1,3,14,2,15,3,1,6,4,2,2,22,1,7,1,2,1,2,1,2,2,1,1,5,4,2,2,3,3,1,7,4,1,1,
7,16,11,3,1,9,1,3,1,22,1,7,1,2,1,5,2,10,1,3,1,3,2,1,15,4,2,10,17,3,1,8,2,2,2,22,
1,7,1,2,1,5,2,9,2,2,2,3,8,2,4,2,1,3,4,10,1,1,16,2,1,6,3,3,1,4,3,2,1,1,1,2,3,2,3,
3,3,12,4,5,3,3,1,4,2,1,6,1,14,10,17,3,1,8,1,3,1,23,1,10,1,5,3,1,8,3,1,4,7,2,1,2,
6,4,2,10,18,2,1,8,1,3,1,23,1,10,1,5,2,9,1,3,1,4,7,2,7,1,1,4,2,10,1,2,15,2,1,8,1,
3,1,41,2,1,8,3,5,1,8,1,8,4,2,10,10,6,2,2,1,18,3,24,1,9,1,1,2,7,3,1,4,6,1,1,1,8,
18,2,13,48,1,9,5,7,9,10,39,2,1,1,2,2,1,1,2,1,6,4,1,7,1,3,1,1,1,1,2,2,1,4,1,8,3,
1,2,5,1,1,1,6,2,10,2,4,32,1,23,2,6,10,11,1,1,1,1,1,6,8,1,36,4,20,1,18,1,36,9,1,
57,43,20,11,6,6,4,4,3,1,3,57,2,38,1,1,5,1,2,43,1,333,1,4,2,7,1,1,1,4,2,41,1,4,2,
33,1,4,2,7,1,1,1,4,2,15,1,57,1,4,2,67,2,3,32,16,16,85,12,620,2,17,1,26,5,75,3,3,
15,13,1,4,14,18,14,18,14,13,1,3,1,2,12,52,35,1,4,2,2,10,33,3,2,10,6,88,8,41,1,1,
5,70,10,29,3,12,4,12,20,30,2,5,11,44,4,26,6,10,38,23,9,53,11,29,2,11,6,10,13,1,
93,47,17,7,4,10,17,9,15,30,13,70,12,36,28,10,3,3,10,36,82,3,22,4,1,4,3,2,9,192,
64,278,2,6,2,38,2,6,2,8,1,1,1,1,1,1,1,31,2,53,1,7,1,1,3,3,1,7,3,4,2,6,4,13,5,3,
1,7,15,2,49,2,19,1,28,1,13,1,16,13,51,13,4,1,3,12,17,1,4,1,2,10,1,1,3,5,6,1,1,1,
1,1,1,4,1,11,2,4,5,5,4,1,17,41,2679,47,1,47,1,133,6,4,3,2,12,38,1,1,5,1,2,56,7,
1,16,23,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,32,47,1,469,3,25,9,7,5,2,5,4,86,2,2,2,
3,1,90,1,4,5,41,3,94,17,27,53,16,512,6582,74,20941,51,1165,67,46,2,269,3,16,10,
2,20,47,5,10,1,25,7,83,37,9,2,103,2,4,1,4,12,11,77,10,1,37,24,52,12,69,11,10,24,
6,3,1,4,46,2,23,25,29,3,65,14,1,48,41,23,3,1,10,2,10,6,23,3,2,4,48,1,1,3,2,2,5,
2,1,1,1,24,3,2,11,7,3,12,6,2,6,2,6,9,7,1,7,145,35,9,2,2,10,6,11172,12,23,4,49,
8452,366,2,106,38,7,12,5,5,1,1,10,1,13,1,5,1,1,1,2,1,2,1,108,33,363,18,64,2,54,
40,12,4,16,16,7,12,2,24,3,32,5,1,135,19,10,7,26,4,1,1,26,11,89,3,6,2,6,2,6,2,3];

(function f(array) {
	var i, l;
	for (i = 1, l = array.length; i<l; i++) {
		array[i] += array[i - 1];
	}
	return f;
})(nonASCIIidentifierStart)(nonASCIIidentifier);

var sNonASCIIidentifierStart = String.fromCharCode.apply(String, nonASCIIidentifierStart),
sNonASCIIidentifier = String.fromCharCode.apply(String, nonASCIIidentifier);

var binarySearch = function (array, value) {
	var lower = 0, upper = array.length, index, compare;
	while (lower < upper) {
		index = (lower + upper) >> 1;
		compare = array.charCodeAt(index);
		if (compare <= value) {
			lower = index + 1;
		} else if (compare > value) {
			upper = index;
		}
	}
	return lower;
};

var merge = function (a, s, e) {
	var i = binarySearch(a, s),
	j = binarySearch(a, e);
	if (a[i - 1] === s) i--;
	if (j > i) a.splice(i, j - i);
	if ((j & 1) === 0) a.splice(i, 0, e);
	if ((i & 1) === 0) a.splice(i, 0, s);
};

var isIdentifierStart = function(code) {
	if (code < 65) return code === 36;
	if (code < 91) return true;
	if (code < 97) return code === 95;
	if (code < 123) return true;
	return code >= 0xaa &&
		(binarySearch(nonASCIIidentifierStart, code) & 1) === 1;
};

var isIdentifierChar = function(code) {
	if (code < 48) return code === 36;
	if (code < 58) return true;
	if (code < 65) return false;
	if (code < 91) return true;
	if (code < 97) return code === 95;
	if (code < 123) return true;
	return code >= 0xaa &&
		(binarySearch(nonASCIIidentifier, code) & 1) === 1;
};

var keywords = listToTable(["break", "do", "instanceof", "typeof", "case", "else", "new", "var", "catch", "finally", "return", "void", "continue", "for", "switch", "while", "debugger", "function", "this", "with", "default", "if", "throw", "delete", "in", "try"]);

var reservedWords = listToTable(["class", "enum", "extends", "super", "const", "export", "import", "", "implements", "interface", "yield", "let", "package", "private", "protected", "public", "static"]);

var badIds = listToTable(["eval", "arguments"]);

var keywordsAndReservedWordsAndBadIds = {};
mixin(keywordsAndReservedWordsAndBadIds, keywords);
mixin(keywordsAndReservedWordsAndBadIds, reservedWords);
mixin(keywordsAndReservedWordsAndBadIds, badIds);

var checkId = function (id) {
	if (keywordsAndReservedWordsAndBadIds[id] === 1) {
		_checkId(id);
	}
};

var _checkId = function (id) {
	if (keywords[id] === 1) {
		throw new Error("keyword '" + id + "'");
	} else if (reservedWords[id] === 1) {
		warn("reserved word '" + id + "'");
	} else if (badIds[id] === 1) {
		warn("bad id '" + id + "'");
	}
}
